<templateSet group="user">
  <template name="vb" value="  /**&#10;     * 显示单按钮对话框&#10;     *&#10;     * @param msg&#10;     */&#10;    public void showErrorDialog(String msg) {&#10;        getvDelegate().showErrorDialog(msg);&#10;    }&#10;&#10;    /**&#10;     * 显示双按钮对话框&#10;     *&#10;     * @param msg&#10;     * @param callback&#10;     */&#10;    public void showNoticeDialog(String msg, MaterialDialog.SingleButtonCallback callback) {&#10;        getvDelegate().showNoticeDialog(msg, callback);&#10;    }&#10;&#10;    public void showError(NetError error) {&#10;        getvDelegate().showError(error);&#10;    }&#10;&#10;   public void showToast(String msg) {&#10;        getvDelegate().toastShort(msg);&#10;    }&#10;    /**&#10;     * 初始化界面&#10;     */&#10;    private void initView() {&#10;&#10;    }&#10;/**&#10;  * 初始化Toolbar&#10;  */&#10;    private void initToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        getSupportActionBar().setHomeButtonEnabled(true);&#10;        getSupportActionBar().setHomeAsUpIndicator(R.drawable.ic_keyboard_arrow_left_black_24dp);&#10;        getSupportActionBar().setDisplayShowTitleEnabled(false);&#10;        title.setText(&quot;账户&quot;);&#10;    }&#9;&#9;&#10;public void JumpActivity(Class&lt;?&gt; activity) {&#10;        Router.newIntent(context)&#10;                .to(activity)&#10;                .launch();&#10;    }&#9;&#10; public void JumpActivity(Class&lt;?&gt; activity, boolean finish) {&#10;        Router.newIntent(context)&#10;                .to(activity)&#10;                .launch();&#10;        if (finish) {&#10;            Router.pop(context);&#10;        }&#10;    }&#9;" description="view必写内容" toReformat="false" toShortenFQNames="true" />
  <template name="kct" value="class $ClassName$ {&#10;    interface View : BaseView {&#10;        /**&#10;         * 请求成功&#10;         *&#10;         * @param bean&#10;         */&#10;//        fun getSuccess(bean: QuestionDetailBean)&#10;&#10;    }&#10;&#10;    interface Presenter : BasePresenter&lt;View&gt; {&#10;&#10;        /**&#10;         * 请求  &#10;         * @programId&#10;         * @audioId&#10;         */&#10;//        fun getQuestionDetail(programId: Int)&#10;    }&#10;}" description="KotlinContractTemplate" toReformat="false" toShortenFQNames="true">
    <variable name="ClassName" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="kac" value="class $ClassName$ : BaseSimpleActivity&lt;$ClassName$&gt;(), $ClassName$.View, View.OnClickListener {&#10;&#10;    override fun createPresenter(): $ClassName$ {&#10;        return $ClassName$(this)&#10;&#10;    }&#10;&#10;    override fun initEventAndData() {&#10;        initView()&#10;        initData()&#10;    }&#10;&#10;    override fun getLayout(): Int = R.layout.&#10;&#10;    /**&#10;     * 初始化UI&#10;     */&#10;    private fun initView() {&#10;&#10;        imgBack.setOnClickListener(this)&#10;    }&#10;&#10;    /**&#10;     * 请求数据&#10;     */&#10;    private fun initData() {&#10;    &#10;    }&#10;&#10;    /**&#10;     * 请求错误信息展示&#10;     */&#10;    override fun showError(msg: String?) {&#10;        toastShow(msg)&#10;    }&#10;&#10;    /**&#10;     * 点击事件监听&#10;     */&#10;    override fun onClick(v: View?) {&#10;        when (v?.id) {&#10;            R.id.imgBack -&gt; finish()&#10;        }&#10;    }" description="KotlinActivityTemplate" toReformat="false" toShortenFQNames="true">
    <variable name="ClassName" expression="kotlinClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="kp" value="class $ClassName$(private val context: Context) : RxPresenter&lt;$ClassName$Contract.View&gt;(), $ClassName$Contract.Presenter {&#10;&#10;    private val apiServer: ReadApiServer = HttpMethods.getInstance().create(ReadApiServer::class.java)&#10;&#10;    /**&#10;     * 获取结果页请求数据&#10;     */&#10;    override fun getResult(id: Int) {&#10;        request(context, true, apiServer.certificateShare(id), object : ApiCallback&lt;CertificateShareBean&gt; {&#10;            override fun onSuccess(model: CertificateShareBean) {&#10;                mView.getResultSuccess(model)&#10;            }&#10;&#10;            override fun onFailure(msg: String?) {&#10;                mView.showError(msg)&#10;            }&#10;        })&#10;    }&#10;&#10;}" description="KotlinPresenterTemplate" toReformat="false" toShortenFQNames="true">
    <variable name="ClassName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
</templateSet>